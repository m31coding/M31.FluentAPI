// <auto-generated/>
// This code was generated by the library M31.FluentAPI.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#nullable enable

using System;
using M31.FluentApi.Attributes;
using System.Reflection;

namespace M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.InheritedClassPrivateSetters;

public class CreatePerson :
    CreatePerson.ICreatePerson,
    CreatePerson.IWithName,
    CreatePerson.IBornOn
{
    private readonly Person person;
    private static readonly PropertyInfo namePropertyInfo;
    private static readonly PropertyInfo dateOfBirthPropertyInfo;

    static CreatePerson()
    {
        namePropertyInfo = typeof(Person).GetProperty("Name", BindingFlags.Instance | BindingFlags.Public)!;
        dateOfBirthPropertyInfo = typeof(Person).GetProperty("DateOfBirth", BindingFlags.Instance | BindingFlags.Public)!;
    }

    private CreatePerson()
    {
        person = new Person();
    }

    public static ICreatePerson InitialStep()
    {
        return new CreatePerson();
    }

    public static IBornOn WithName(string name)
    {
        CreatePerson createPerson = new CreatePerson();
        CreatePerson.namePropertyInfo.SetValue(createPerson.person, name);
        return createPerson;
    }

    IBornOn IWithName.WithName(string name)
    {
        CreatePerson.namePropertyInfo.SetValue(person, name);
        return this;
    }

    Person IBornOn.BornOn(System.DateOnly dateOfBirth)
    {
        CreatePerson.dateOfBirthPropertyInfo.SetValue(person, dateOfBirth);
        return person;
    }

    public interface ICreatePerson : IWithName
    {
    }

    public interface IWithName
    {
        IBornOn WithName(string name);
    }

    public interface IBornOn
    {
        Person BornOn(System.DateOnly dateOfBirth);
    }
}