// <auto-generated/>
// This code was generated by the library M31.FluentAPI.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#nullable enable

using System;
using M31.FluentApi.Attributes;
using System.Reflection;

namespace M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.InheritedClassPrivateSetters;

public class CreateStudent :
    CreateStudent.ICreateStudent,
    CreateStudent.IWithName,
    CreateStudent.IOfAgeBornOn,
    CreateStudent.IInSemester
{
    private readonly Student student;
    private static readonly PropertyInfo semesterPropertyInfo;
    private static readonly PropertyInfo namePropertyInfo;
    private static readonly PropertyInfo agePropertyInfo;
    private static readonly MethodInfo bornOnMethodInfo;

    static CreateStudent()
    {
        semesterPropertyInfo = typeof(Student).GetProperty("Semester", BindingFlags.Instance | BindingFlags.Public)!;
        namePropertyInfo = typeof(Person).GetProperty("Name", BindingFlags.Instance | BindingFlags.Public)!;
        agePropertyInfo = typeof(Person).GetProperty("Age", BindingFlags.Instance | BindingFlags.Public)!;
        bornOnMethodInfo = typeof(Person).GetMethod(
            "BornOn",
            0,
            BindingFlags.Instance | BindingFlags.NonPublic,
            null,
            new Type[] { typeof(System.DateOnly) },
            null)!;
    }

    private CreateStudent()
    {
        student = new Student();
    }

    public static ICreateStudent InitialStep()
    {
        return new CreateStudent();
    }

    public static IOfAgeBornOn WithName(string name)
    {
        CreateStudent createStudent = new CreateStudent();
        CreateStudent.namePropertyInfo.SetValue(createStudent.student, name);
        return createStudent;
    }

    IOfAgeBornOn IWithName.WithName(string name)
    {
        CreateStudent.namePropertyInfo.SetValue(student, name);
        return this;
    }

    IInSemester IOfAgeBornOn.OfAge(int age)
    {
        CreateStudent.agePropertyInfo.SetValue(student, age);
        return this;
    }

    IInSemester IOfAgeBornOn.BornOn(System.DateOnly dateOfBirth)
    {
        CreateStudent.bornOnMethodInfo.Invoke(student, new object?[] { dateOfBirth });
        return this;
    }

    Student IInSemester.InSemester(int semester)
    {
        CreateStudent.semesterPropertyInfo.SetValue(student, semester);
        return student;
    }

    public interface ICreateStudent : IWithName
    {
    }

    public interface IWithName
    {
        IOfAgeBornOn WithName(string name);
    }

    public interface IOfAgeBornOn
    {
        IInSemester OfAge(int age);

        IInSemester BornOn(System.DateOnly dateOfBirth);
    }

    public interface IInSemester
    {
        Student InSemester(int semester);
    }
}