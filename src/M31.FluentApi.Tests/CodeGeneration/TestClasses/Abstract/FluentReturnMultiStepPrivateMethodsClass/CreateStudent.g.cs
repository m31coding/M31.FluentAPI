// <auto-generated/>
// This code was generated by the library M31.FluentAPI.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#nullable enable

using System.Collections.Generic;
using M31.FluentApi.Attributes;
using System;
using System.Reflection;

namespace M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentReturnMultiStepPrivateMethodsClass;

public class CreateStudent :
    CreateStudent.ICreateStudent,
    CreateStudent.IWithName,
    CreateStudent.IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter
{
    private readonly Student student;
    private static readonly PropertyInfo namePropertyInfo;
    private static readonly MethodInfo returnVoidMethodMethodInfo;
    private static readonly MethodInfo returnIntMethodMethodInfo;
    private static readonly MethodInfo returnListMethodMethodInfo;
    private static readonly MethodInfo returnIntMethodWithRefParameterMethodInfo;

    static CreateStudent()
    {
        namePropertyInfo = typeof(Student).GetProperty("Name", BindingFlags.Instance | BindingFlags.Public)!;
        returnVoidMethodMethodInfo = typeof(Student).GetMethod(
            "ReturnVoidMethod",
            0,
            BindingFlags.Instance | BindingFlags.NonPublic,
            null,
            new Type[] {  },
            null)!;
        returnIntMethodMethodInfo = typeof(Student).GetMethod(
            "ReturnIntMethod",
            0,
            BindingFlags.Instance | BindingFlags.NonPublic,
            null,
            new Type[] {  },
            null)!;
        returnListMethodMethodInfo = typeof(Student).GetMethod(
            "ReturnListMethod",
            0,
            BindingFlags.Instance | BindingFlags.NonPublic,
            null,
            new Type[] {  },
            null)!;
        returnIntMethodWithRefParameterMethodInfo = typeof(Student).GetMethod(
            "ReturnIntMethodWithRefParameter",
            0,
            BindingFlags.Instance | BindingFlags.NonPublic,
            null,
            new Type[] { typeof(string).MakeByRefType() },
            null)!;
    }

    private CreateStudent()
    {
        student = new Student();
    }

    public static ICreateStudent InitialStep()
    {
        return new CreateStudent();
    }

    public static IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter WithName(string name)
    {
        CreateStudent createStudent = new CreateStudent();
        CreateStudent.namePropertyInfo.SetValue(createStudent.student, name);
        return createStudent;
    }

    IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter IWithName.WithName(string name)
    {
        CreateStudent.namePropertyInfo.SetValue(student, name);
        return this;
    }

    void IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter.ReturnVoidMethod()
    {
        CreateStudent.returnVoidMethodMethodInfo.Invoke(student, new object?[] {  });
    }

    int IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter.ReturnIntMethod()
    {
        return (int) CreateStudent.returnIntMethodMethodInfo.Invoke(student, new object?[] {  })!;
    }

    System.Collections.Generic.List<int> IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter.ReturnListMethod()
    {
        return (System.Collections.Generic.List<int>) CreateStudent.returnListMethodMethodInfo.Invoke(student, new object?[] {  })!;
    }

    int IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter.ReturnIntMethodWithRefParameter(ref string s)
    {
        object?[] args = new object?[] { s };
        int result = (int) CreateStudent.returnIntMethodWithRefParameterMethodInfo.Invoke(student, args)!;
        s = (string) args[0]!;
        return result;
    }

    public interface ICreateStudent : IWithName
    {
    }

    public interface IWithName
    {
        IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter WithName(string name);
    }

    public interface IReturnVoidMethodReturnIntMethodReturnListMethodReturnIntMethodWithRefParameter
    {
        void ReturnVoidMethod();

        int ReturnIntMethod();

        System.Collections.Generic.List<int> ReturnListMethod();

        int ReturnIntMethodWithRefParameter(ref string s);
    }
}