// <auto-generated/>
// This code was generated by the library M31.FluentAPI.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#nullable enable

using System.Collections.Generic;
using M31.FluentApi.Attributes;
using System.Reflection;

namespace M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.NullablePredicateAndCollectionClass;

public class CreateStudent : CreateStudent.IWhoIsHappy
{
    private readonly Student student;
    private static readonly PropertyInfo isHappyPropertyInfo;

    static CreateStudent()
    {
        isHappyPropertyInfo = typeof(Student).GetProperty("IsHappy", BindingFlags.Instance | BindingFlags.Public)!;
    }

    private CreateStudent()
    {
        student = new Student();
    }

    public static IWhoIsHappy WhoseFriendsAre(System.Collections.Generic.IReadOnlyCollection<string>? friends)
    {
        CreateStudent createStudent = new CreateStudent();
        createStudent.student.Friends = friends;
        return createStudent;
    }

    public static IWhoIsHappy WhoseFriendsAre(params string[]? friends)
    {
        CreateStudent createStudent = new CreateStudent();
        createStudent.student.Friends = friends;
        return createStudent;
    }

    public static IWhoIsHappy WhoseFriendIs(string friend)
    {
        CreateStudent createStudent = new CreateStudent();
        createStudent.student.Friends = new string[1]{ friend };
        return createStudent;
    }

    public static IWhoIsHappy WhoHasNoFriends()
    {
        CreateStudent createStudent = new CreateStudent();
        createStudent.student.Friends = new string[0];
        return createStudent;
    }

    public static IWhoIsHappy WhoseFriendsAreUnknown()
    {
        CreateStudent createStudent = new CreateStudent();
        createStudent.student.Friends = null;
        return createStudent;
    }

    public Student WhoIsHappy(bool? isHappy = true)
    {
        isHappyPropertyInfo.SetValue(student, isHappy);
        return student;
    }

    public Student WhoIsSad()
    {
        isHappyPropertyInfo.SetValue(student, false);
        return student;
    }

    public Student WithUnknownMood()
    {
        isHappyPropertyInfo.SetValue(student, null);
        return student;
    }

    public interface IWhoIsHappy
    {
        Student WhoIsHappy(bool? isHappy = true);
        Student WhoIsSad();
        Student WithUnknownMood();
    }
}