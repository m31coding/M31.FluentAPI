// <auto-generated/>
// This code was generated by the library M31.FluentAPI.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#nullable enable

using M31.FluentApi.Attributes;
using System.Reflection;

namespace M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.ContinueWithAfterCompoundClass;

public class CreateStudent :
    CreateStudent.ICreateStudent,
    CreateStudent.IWithName,
    CreateStudent.IWithProperty1,
    CreateStudent.IWithProperty2
{
    private readonly Student student;
    private static readonly PropertyInfo firstNamePropertyInfo;
    private static readonly PropertyInfo lastNamePropertyInfo;
    private static readonly PropertyInfo property1PropertyInfo;
    private static readonly PropertyInfo property2PropertyInfo;

    static CreateStudent()
    {
        firstNamePropertyInfo = typeof(Student).GetProperty("FirstName", BindingFlags.Instance | BindingFlags.Public)!;
        lastNamePropertyInfo = typeof(Student).GetProperty("LastName", BindingFlags.Instance | BindingFlags.Public)!;
        property1PropertyInfo = typeof(Student).GetProperty("Property1", BindingFlags.Instance | BindingFlags.Public)!;
        property2PropertyInfo = typeof(Student).GetProperty("Property2", BindingFlags.Instance | BindingFlags.Public)!;
    }

    private CreateStudent()
    {
        student = new Student();
    }

    public static ICreateStudent InitialStep()
    {
        return new CreateStudent();
    }

    public static IWithProperty2 WithName(string firstName, string lastName)
    {
        CreateStudent createStudent = new CreateStudent();
        CreateStudent.firstNamePropertyInfo.SetValue(createStudent.student, firstName);
        CreateStudent.lastNamePropertyInfo.SetValue(createStudent.student, lastName);
        return createStudent;
    }

    IWithProperty2 IWithName.WithName(string firstName, string lastName)
    {
        CreateStudent.firstNamePropertyInfo.SetValue(student, firstName);
        CreateStudent.lastNamePropertyInfo.SetValue(student, lastName);
        return this;
    }

    IWithProperty2 IWithProperty1.WithProperty1(string property1)
    {
        CreateStudent.property1PropertyInfo.SetValue(student, property1);
        return this;
    }

    Student IWithProperty2.WithProperty2(string property2)
    {
        CreateStudent.property2PropertyInfo.SetValue(student, property2);
        return student;
    }

    public interface ICreateStudent : IWithName
    {
    }

    public interface IWithName
    {
        IWithProperty2 WithName(string firstName, string lastName);
    }

    public interface IWithProperty1
    {
        IWithProperty2 WithProperty1(string property1);
    }

    public interface IWithProperty2
    {
        Student WithProperty2(string property2);
    }
}