// <auto-generated/>
// This code was generated by the library M31.FluentAPI.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#nullable enable

using System;
using System.Reflection;

namespace M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.DocumentationComments.CommentedMethodsClass;

public class CreateStudent :
    CreateStudent.ICreateStudent,
    CreateStudent.IWithName,
    CreateStudent.IOfAgeBornOn
{
    private readonly Student student;
    private static readonly MethodInfo withNameMethodInfo;
    private static readonly PropertyInfo agePropertyInfo;
    private static readonly MethodInfo bornOnMethodInfo;

    static CreateStudent()
    {
        withNameMethodInfo = typeof(Student).GetMethod(
            "WithName",
            0,
            BindingFlags.Instance | BindingFlags.NonPublic,
            null,
            new Type[] { typeof(string), typeof(string) },
            null)!;
        agePropertyInfo = typeof(Student).GetProperty("Age", BindingFlags.Instance | BindingFlags.Public)!;
        bornOnMethodInfo = typeof(Student).GetMethod(
            "BornOn",
            0,
            BindingFlags.Instance | BindingFlags.NonPublic,
            null,
            new Type[] { typeof(System.DateOnly) },
            null)!;
    }

    private CreateStudent()
    {
        student = new Student();
    }

    public static ICreateStudent InitialStep()
    {
        return new CreateStudent();
    }

    /// <summary>Sets the student's first and last name.</summary>
    /// <param name="firstName">The student's first name.</param>
    /// <param name="lastName">The student's last name.</param>
    public static IOfAgeBornOn WithName(string firstName, string lastName)
    {
        CreateStudent createStudent = new CreateStudent();
        CreateStudent.withNameMethodInfo.Invoke(createStudent.student, new object?[] { firstName, lastName });
        return createStudent;
    }

    /// <inheritdoc/>
    IOfAgeBornOn IWithName.WithName(string firstName, string lastName)
    {
        CreateStudent.withNameMethodInfo.Invoke(student, new object?[] { firstName, lastName });
        return this;
    }

    Student IOfAgeBornOn.OfAge(int age)
    {
        CreateStudent.agePropertyInfo.SetValue(student, age);
        return student;
    }

    /// <inheritdoc/>
    Student IOfAgeBornOn.BornOn(System.DateOnly dateOfBirth)
    {
        CreateStudent.bornOnMethodInfo.Invoke(student, new object?[] { dateOfBirth });
        return student;
    }

    public interface ICreateStudent : IWithName
    {
    }

    public interface IWithName
    {
        /// <summary>Sets the student's first and last name.</summary>
        /// <param name="firstName">The student's first name.</param>
        /// <param name="lastName">The student's last name.</param>
        IOfAgeBornOn WithName(string firstName, string lastName);
    }

    public interface IOfAgeBornOn
    {
        Student OfAge(int age);

        /// <summary>Calculates and sets the student's age based on the provided date of birth.</summary>
        /// <param name="dateOfBirth">The student's date of birth.</param>
        Student BornOn(System.DateOnly dateOfBirth);
    }
}