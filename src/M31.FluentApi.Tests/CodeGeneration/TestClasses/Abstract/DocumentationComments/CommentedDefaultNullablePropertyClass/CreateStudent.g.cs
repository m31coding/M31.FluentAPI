// <auto-generated/>
// This code was generated by the library M31.FluentAPI.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#nullable enable

using System.Reflection;

namespace M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.DocumentationComments.CommentedDefaultNullablePropertyClass;

public class CreateStudent :
    CreateStudent.ICreateStudent,
    CreateStudent.IWithNameLivingIn,
    CreateStudent.IWhoIsHappy
{
    private readonly Student student;
    private static readonly PropertyInfo isHappyPropertyInfo;

    static CreateStudent()
    {
        isHappyPropertyInfo = typeof(Student).GetProperty("IsHappy", BindingFlags.Instance | BindingFlags.Public)!;
    }

    private CreateStudent()
    {
        student = new Student();
    }

    public static ICreateStudent InitialStep()
    {
        return new CreateStudent();
    }

    public static IWhoIsHappy WithName(string name)
    {
        CreateStudent createStudent = new CreateStudent();
        createStudent.student.Name = name;
        return createStudent;
    }

    /// <summary>Sets the student's city.</summary>
    /// <param name="city">The student's city.</param>
    public static IWhoIsHappy LivingIn(string? city)
    {
        CreateStudent createStudent = new CreateStudent();
        createStudent.student.City = city;
        return createStudent;
    }

    /// <summary>Set's the student's city to Boston.</summary>
    public static IWhoIsHappy LivingInBoston()
    {
        CreateStudent createStudent = new CreateStudent();
        return createStudent;
    }

    /// <summary>Set's the student's city to null.</summary>
    public static IWhoIsHappy InUnknownCity()
    {
        CreateStudent createStudent = new CreateStudent();
        createStudent.student.City = null;
        return createStudent;
    }

    IWhoIsHappy IWithNameLivingIn.WithName(string name)
    {
        student.Name = name;
        return this;
    }

    /// <inheritdoc/>
    IWhoIsHappy IWithNameLivingIn.LivingIn(string? city)
    {
        student.City = city;
        return this;
    }

    /// <inheritdoc/>
    IWhoIsHappy IWithNameLivingIn.LivingInBoston()
    {
        return this;
    }

    /// <inheritdoc/>
    IWhoIsHappy IWithNameLivingIn.InUnknownCity()
    {
        student.City = null;
        return this;
    }

    Student IWhoIsHappy.WhoIsHappy(bool? isHappy)
    {
        CreateStudent.isHappyPropertyInfo.SetValue(student, isHappy);
        return student;
    }

    Student IWhoIsHappy.WhoIsSad()
    {
        CreateStudent.isHappyPropertyInfo.SetValue(student, false);
        return student;
    }

    Student IWhoIsHappy.WithUnknownMood()
    {
        CreateStudent.isHappyPropertyInfo.SetValue(student, null);
        return student;
    }

    public interface ICreateStudent : IWithNameLivingIn
    {
    }

    public interface IWithNameLivingIn
    {
        IWhoIsHappy WithName(string name);

        /// <summary>Sets the student's city.</summary>
        /// <param name="city">The student's city.</param>
        IWhoIsHappy LivingIn(string? city);

        /// <summary>Set's the student's city to Boston.</summary>
        IWhoIsHappy LivingInBoston();

        /// <summary>Set's the student's city to null.</summary>
        IWhoIsHappy InUnknownCity();
    }

    public interface IWhoIsHappy
    {
        Student WhoIsHappy(bool? isHappy = true);

        Student WhoIsSad();

        Student WithUnknownMood();
    }
}