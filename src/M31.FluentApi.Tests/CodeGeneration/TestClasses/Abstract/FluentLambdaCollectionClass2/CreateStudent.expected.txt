// <auto-generated/>
// This code was generated by the library M31.FluentAPI.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#nullable enable

using System.Collections.Generic;
using M31.FluentApi.Attributes;
using System.Reflection;
using System;
using System.Linq;

namespace M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2;

public class CreateStudent :
    CreateStudent.ICreateStudent,
    CreateStudent.IWithName,
    CreateStudent.IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE
{
    private readonly Student student;
    private static readonly PropertyInfo namePropertyInfo;
    private static readonly PropertyInfo addressesAPropertyInfo;
    private static readonly PropertyInfo addressesBPropertyInfo;
    private static readonly PropertyInfo addressesCPropertyInfo;
    private static readonly PropertyInfo addressesDPropertyInfo;
    private static readonly PropertyInfo addressesEPropertyInfo;

    static CreateStudent()
    {
        namePropertyInfo = typeof(Student).GetProperty("Name", BindingFlags.Instance | BindingFlags.Public)!;
        addressesAPropertyInfo = typeof(Student).GetProperty("AddressesA", BindingFlags.Instance | BindingFlags.Public)!;
        addressesBPropertyInfo = typeof(Student).GetProperty("AddressesB", BindingFlags.Instance | BindingFlags.Public)!;
        addressesCPropertyInfo = typeof(Student).GetProperty("AddressesC", BindingFlags.Instance | BindingFlags.Public)!;
        addressesDPropertyInfo = typeof(Student).GetProperty("AddressesD", BindingFlags.Instance | BindingFlags.Public)!;
        addressesEPropertyInfo = typeof(Student).GetProperty("AddressesE", BindingFlags.Instance | BindingFlags.Public)!;
    }

    private CreateStudent()
    {
        student = new Student();
    }

    public static ICreateStudent InitialStep()
    {
        return new CreateStudent();
    }

    public static IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE WithName(string name)
    {
        CreateStudent createStudent = new CreateStudent();
        CreateStudent.namePropertyInfo.SetValue(createStudent.student, name);
        return createStudent;
    }

    IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE IWithName.WithName(string name)
    {
        CreateStudent.namePropertyInfo.SetValue(student, name);
        return this;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithAddressesA(System.Collections.Generic.List<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address> addressesA)
    {
        CreateStudent.addressesAPropertyInfo.SetValue(student, addressesA);
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithAddressesA(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address[] addressesA)
    {
        CreateStudent.addressesAPropertyInfo.SetValue(student, new List<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address>(addressesA));
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithAddressesA(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address>[] createAddressesA)
    {
        CreateStudent.addressesAPropertyInfo.SetValue(student, new List<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address>(createAddressesA.Select(createAddressA => createAddressA(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.InitialStep()))));
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithAddressA(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address addressA)
    {
        CreateStudent.addressesAPropertyInfo.SetValue(student, new List<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address>(1){ addressA });
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithAddressA(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address> createAddressA)
    {
        CreateStudent.addressesAPropertyInfo.SetValue(student, new List<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address>(1){ createAddressA(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.InitialStep()) });
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithZeroAddressesA()
    {
        CreateStudent.addressesAPropertyInfo.SetValue(student, new List<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address>(0));
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithAddressesB(System.Collections.Generic.IReadOnlyCollection<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address> addressesB)
    {
        CreateStudent.addressesBPropertyInfo.SetValue(student, addressesB);
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithAddressesB(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address[] addressesB)
    {
        CreateStudent.addressesBPropertyInfo.SetValue(student, addressesB);
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithAddressesB(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address>[] createAddressesB)
    {
        CreateStudent.addressesBPropertyInfo.SetValue(student, createAddressesB.Select(createAddressB => createAddressB(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.InitialStep())).ToArray());
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithAddressB(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address addressB)
    {
        CreateStudent.addressesBPropertyInfo.SetValue(student, new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address[1]{ addressB });
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithAddressB(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address> createAddressB)
    {
        CreateStudent.addressesBPropertyInfo.SetValue(student, new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address[1]{ createAddressB(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.InitialStep()) });
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithZeroAddressesB()
    {
        CreateStudent.addressesBPropertyInfo.SetValue(student, new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address[0]);
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithAddressesC(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address[] addressesC)
    {
        CreateStudent.addressesCPropertyInfo.SetValue(student, addressesC);
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithAddressesC(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address>[] createAddressesC)
    {
        CreateStudent.addressesCPropertyInfo.SetValue(student, createAddressesC.Select(createAddressC => createAddressC(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.InitialStep())).ToArray());
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithAddressC(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address addressC)
    {
        CreateStudent.addressesCPropertyInfo.SetValue(student, new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address[1]{ addressC });
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithAddressC(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address> createAddressC)
    {
        CreateStudent.addressesCPropertyInfo.SetValue(student, new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address[1]{ createAddressC(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.InitialStep()) });
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithZeroAddressesC()
    {
        CreateStudent.addressesCPropertyInfo.SetValue(student, new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address[0]);
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithAddressesD(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address[]? addressesD)
    {
        CreateStudent.addressesDPropertyInfo.SetValue(student, addressesD);
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithAddressesD(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address>[]? createAddressesD)
    {
        CreateStudent.addressesDPropertyInfo.SetValue(student, createAddressesD?.Select(createAddressD => createAddressD(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.InitialStep())).ToArray());
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithAddressD(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address addressD)
    {
        CreateStudent.addressesDPropertyInfo.SetValue(student, new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address[1]{ addressD });
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithAddressD(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address> createAddressD)
    {
        CreateStudent.addressesDPropertyInfo.SetValue(student, new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address[1]{ createAddressD(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.InitialStep()) });
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithZeroAddressesD()
    {
        CreateStudent.addressesDPropertyInfo.SetValue(student, new M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address[0]);
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithAddressesE(System.Collections.Generic.HashSet<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address> addressesE)
    {
        CreateStudent.addressesEPropertyInfo.SetValue(student, addressesE);
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithAddressesE(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address[] addressesE)
    {
        CreateStudent.addressesEPropertyInfo.SetValue(student, new HashSet<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address>(addressesE));
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithAddressesE(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address>[] createAddressesE)
    {
        CreateStudent.addressesEPropertyInfo.SetValue(student, new HashSet<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address>(createAddressesE.Select(createAddressE => createAddressE(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.InitialStep()))));
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithAddressE(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address addressE)
    {
        CreateStudent.addressesEPropertyInfo.SetValue(student, new HashSet<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address>(1){ addressE });
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithAddressE(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address> createAddressE)
    {
        CreateStudent.addressesEPropertyInfo.SetValue(student, new HashSet<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address>(1){ createAddressE(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.InitialStep()) });
        return student;
    }

    Student IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE.WithZeroAddressesE()
    {
        CreateStudent.addressesEPropertyInfo.SetValue(student, new HashSet<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address>(0));
        return student;
    }

    public interface ICreateStudent : IWithName
    {
    }

    public interface IWithName
    {
        IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE WithName(string name);
    }

    public interface IWithAddressesAWithAddressesBWithAddressesCWithAddressesDWithAddressesE
    {
        Student WithAddressesA(System.Collections.Generic.List<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address> addressesA);

        Student WithAddressesA(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address[] addressesA);

        Student WithAddressesA(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address>[] createAddressesA);

        Student WithAddressA(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address addressA);

        Student WithAddressA(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address> createAddressA);

        Student WithZeroAddressesA();

        Student WithAddressesB(System.Collections.Generic.IReadOnlyCollection<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address> addressesB);

        Student WithAddressesB(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address[] addressesB);

        Student WithAddressesB(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address>[] createAddressesB);

        Student WithAddressB(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address addressB);

        Student WithAddressB(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address> createAddressB);

        Student WithZeroAddressesB();

        Student WithAddressesC(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address[] addressesC);

        Student WithAddressesC(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address>[] createAddressesC);

        Student WithAddressC(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address addressC);

        Student WithAddressC(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address> createAddressC);

        Student WithZeroAddressesC();

        Student WithAddressesD(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address[]? addressesD);

        Student WithAddressesD(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address>[]? createAddressesD);

        Student WithAddressD(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address addressD);

        Student WithAddressD(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address> createAddressD);

        Student WithZeroAddressesD();

        Student WithAddressesE(System.Collections.Generic.HashSet<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address> addressesE);

        Student WithAddressesE(params M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address[] addressesE);

        Student WithAddressesE(params Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address>[] createAddressesE);

        Student WithAddressE(M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address addressE);

        Student WithAddressE(Func<M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.CreateAddress.ICreateAddress, M31.FluentApi.Tests.CodeGeneration.TestClasses.Abstract.FluentLambdaCollectionClass2.Address> createAddressE);

        Student WithZeroAddressesE();
    }
}