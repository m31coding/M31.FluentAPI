// <auto-generated/>
// This code was generated by the library M31.FluentAPI.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#nullable enable

using System;
using System.Collections.Generic;
using System.Reflection;

namespace M31.FluentApi.Tests.CodeGeneration.TestClasses.DocumentedStudentClass;

public class CreateDocumentedStudent :
    CreateDocumentedStudent.ICreateDocumentedStudent,
    CreateDocumentedStudent.INamed,
    CreateDocumentedStudent.IOfAgeBornOn,
    CreateDocumentedStudent.IInSemester,
    CreateDocumentedStudent.ILivingIn,
    CreateDocumentedStudent.IWhoIsHappy,
    CreateDocumentedStudent.IWhoseFriendsAre
{
    private readonly DocumentedStudent documentedStudent;
    private static readonly PropertyInfo firstNamePropertyInfo;
    private static readonly PropertyInfo lastNamePropertyInfo;
    private static readonly PropertyInfo agePropertyInfo;
    private static readonly MethodInfo bornOnMethodInfo;
    private static readonly PropertyInfo semesterPropertyInfo;
    private static readonly PropertyInfo cityPropertyInfo;
    private static readonly PropertyInfo isHappyPropertyInfo;
    private static readonly PropertyInfo friendsPropertyInfo;

    static CreateDocumentedStudent()
    {
        firstNamePropertyInfo = typeof(DocumentedStudent).GetProperty("FirstName", BindingFlags.Instance | BindingFlags.Public)!;
        lastNamePropertyInfo = typeof(DocumentedStudent).GetProperty("LastName", BindingFlags.Instance | BindingFlags.Public)!;
        agePropertyInfo = typeof(DocumentedStudent).GetProperty("Age", BindingFlags.Instance | BindingFlags.Public)!;
        bornOnMethodInfo = typeof(DocumentedStudent).GetMethod(
            "BornOn",
            0,
            BindingFlags.Instance | BindingFlags.NonPublic,
            null,
            new Type[] { typeof(System.DateOnly) },
            null)!;
        semesterPropertyInfo = typeof(DocumentedStudent).GetProperty("Semester", BindingFlags.Instance | BindingFlags.Public)!;
        cityPropertyInfo = typeof(DocumentedStudent).GetProperty("City", BindingFlags.Instance | BindingFlags.Public)!;
        isHappyPropertyInfo = typeof(DocumentedStudent).GetProperty("IsHappy", BindingFlags.Instance | BindingFlags.Public)!;
        friendsPropertyInfo = typeof(DocumentedStudent).GetProperty("Friends", BindingFlags.Instance | BindingFlags.Public)!;
    }

    private CreateDocumentedStudent()
    {
        documentedStudent = new DocumentedStudent();
    }

    public static ICreateDocumentedStudent InitialStep()
    {
        return new CreateDocumentedStudent();
    }

    /// <summary>Sets the student's name.</summary>
    /// <param name="firstName">The student's first name.</param>
    /// <param name="lastName">The student's last name.</param>
    /// <returns>A builder for setting the student's age.</returns>
    public static IOfAgeBornOn Named(string firstName, string lastName)
    {
        CreateDocumentedStudent createDocumentedStudent = new CreateDocumentedStudent();
        CreateDocumentedStudent.firstNamePropertyInfo.SetValue(createDocumentedStudent.documentedStudent, firstName);
        CreateDocumentedStudent.lastNamePropertyInfo.SetValue(createDocumentedStudent.documentedStudent, lastName);
        return createDocumentedStudent;
    }

    /// <inheritdoc/>
    IOfAgeBornOn INamed.Named(string firstName, string lastName)
    {
        CreateDocumentedStudent.firstNamePropertyInfo.SetValue(documentedStudent, firstName);
        CreateDocumentedStudent.lastNamePropertyInfo.SetValue(documentedStudent, lastName);
        return this;
    }

    /// <inheritdoc/>
    IInSemester IOfAgeBornOn.OfAge(int age)
    {
        CreateDocumentedStudent.agePropertyInfo.SetValue(documentedStudent, age);
        return this;
    }

    /// <inheritdoc/>
    IInSemester IOfAgeBornOn.BornOn(System.DateOnly dateOfBirth)
    {
        CreateDocumentedStudent.bornOnMethodInfo.Invoke(documentedStudent, new object?[] { dateOfBirth });
        return this;
    }

    /// <inheritdoc/>
    ILivingIn IInSemester.InSemester(int semester)
    {
        CreateDocumentedStudent.semesterPropertyInfo.SetValue(documentedStudent, semester);
        return this;
    }

    /// <inheritdoc/>
    ILivingIn IInSemester.WhoStartsUniversity()
    {
        return this;
    }

    /// <inheritdoc/>
    IWhoIsHappy ILivingIn.LivingIn(string? city)
    {
        CreateDocumentedStudent.cityPropertyInfo.SetValue(documentedStudent, city);
        return this;
    }

    /// <inheritdoc/>
    IWhoIsHappy ILivingIn.LivingInBoston()
    {
        return this;
    }

    /// <inheritdoc/>
    IWhoIsHappy ILivingIn.InUnknownCity()
    {
        CreateDocumentedStudent.cityPropertyInfo.SetValue(documentedStudent, null);
        return this;
    }

    /// <inheritdoc/>
    IWhoseFriendsAre IWhoIsHappy.WhoIsHappy(bool? isHappy)
    {
        CreateDocumentedStudent.isHappyPropertyInfo.SetValue(documentedStudent, isHappy);
        return this;
    }

    /// <inheritdoc/>
    IWhoseFriendsAre IWhoIsHappy.WhoIsSad()
    {
        CreateDocumentedStudent.isHappyPropertyInfo.SetValue(documentedStudent, false);
        return this;
    }

    /// <inheritdoc/>
    IWhoseFriendsAre IWhoIsHappy.WithUnknownMood()
    {
        CreateDocumentedStudent.isHappyPropertyInfo.SetValue(documentedStudent, null);
        return this;
    }

    /// <inheritdoc/>
    DocumentedStudent IWhoseFriendsAre.WhoseFriendsAre(System.Collections.Generic.IReadOnlyCollection<string> friends)
    {
        CreateDocumentedStudent.friendsPropertyInfo.SetValue(documentedStudent, friends);
        return documentedStudent;
    }

    /// <inheritdoc/>
    DocumentedStudent IWhoseFriendsAre.WhoseFriendsAre(params string[] friends)
    {
        CreateDocumentedStudent.friendsPropertyInfo.SetValue(documentedStudent, friends);
        return documentedStudent;
    }

    /// <inheritdoc/>
    DocumentedStudent IWhoseFriendsAre.WhoseFriendIs(string friend)
    {
        CreateDocumentedStudent.friendsPropertyInfo.SetValue(documentedStudent, new string[1]{ friend });
        return documentedStudent;
    }

    /// <inheritdoc/>
    DocumentedStudent IWhoseFriendsAre.WhoHasNoFriends()
    {
        CreateDocumentedStudent.friendsPropertyInfo.SetValue(documentedStudent, new string[0]);
        return documentedStudent;
    }

    public interface ICreateDocumentedStudent : INamed
    {
    }

    public interface INamed
    {
        /// <summary>Sets the student's name.</summary>
        /// <param name="firstName">The student's first name.</param>
        /// <param name="lastName">The student's last name.</param>
        /// <returns>A builder for setting the student's age.</returns>
        IOfAgeBornOn Named(string firstName, string lastName);
    }

    public interface IOfAgeBornOn
    {
        /// <summary>Sets the student's age.</summary>
        /// <param name="age">The student's age.</param>
        /// <returns>A builder for setting the student's semester.</returns>
        IInSemester OfAge(int age);

        /// <summary>Sets the student's age based on their date of birth.</summary>
        /// <param name="dateOfBirth">The student's date of birth.</param>
        /// <returns>A builder for setting the student's semester.</returns>
        IInSemester BornOn(System.DateOnly dateOfBirth);
    }

    public interface IInSemester
    {
        /// <summary>Sets the student's current semester.</summary>
        /// <param name="semester">The student's current semester.</param>
        /// <returns>A builder for setting the student's city.</returns>
        ILivingIn InSemester(int semester);

        /// <summary>Sets the student's semester to 0.</summary>
        /// <returns>A builder for setting the student's city.</returns>
        ILivingIn WhoStartsUniversity();
    }

    public interface ILivingIn
    {
        /// <summary>Sets the student's city.</summary>
        /// <param name="city">The student's city.</param>
        /// <returns>A builder for setting whether the student is happy.</returns>
        IWhoIsHappy LivingIn(string? city);

        /// <summary>Sets the student's city to Boston.</summary>
        /// <returns>A builder for setting whether the student is happy.</returns>
        IWhoIsHappy LivingInBoston();

        /// <summary>Sets the student's city to null.</summary>
        /// <returns>A builder for setting whether the student is happy.</returns>
        IWhoIsHappy InUnknownCity();
    }

    public interface IWhoIsHappy
    {
        /// <summary>Sets the <see cref="DocumentedStudent.IsHappy"/> property.</summary>
        /// <param name="isHappy">Indicates whether the student is happy.</param>
        /// <returns>A builder for setting the student's friends.</returns>
        IWhoseFriendsAre WhoIsHappy(bool? isHappy = true);

        /// <summary>Sets the <see cref="DocumentedStudent.IsHappy"/> property to false.</summary>
        /// <returns>A builder for setting the student's friends.</returns>
        IWhoseFriendsAre WhoIsSad();

        /// <summary>Sets the <see cref="DocumentedStudent.IsHappy"/> property to null.</summary>
        /// <returns>A builder for setting the student's friends.</returns>
        IWhoseFriendsAre WithUnknownMood();
    }

    public interface IWhoseFriendsAre
    {
        /// <summary>Sets the student's friends.</summary>
        /// <param name="friends">The student's friends.</param>
        /// <returns>The <see cref="DocumentedStudent"/>.</returns>
        DocumentedStudent WhoseFriendsAre(System.Collections.Generic.IReadOnlyCollection<string> friends);

        /// <summary>Sets the student's friends.</summary>
        /// <param name="friends">The student's friends.</param>
        /// <returns>The <see cref="DocumentedStudent"/>.</returns>
        DocumentedStudent WhoseFriendsAre(params string[] friends);

        /// <summary>Sets a single friend.</summary>
        /// <param name="friend">The student's friend.</param>
        /// <returns>The <see cref="DocumentedStudent"/>.</returns>
        DocumentedStudent WhoseFriendIs(string friend);

        /// <summary>Sets the student's friends to an empty collection.</summary>
        /// <returns>The <see cref="DocumentedStudent"/>.</returns>
        DocumentedStudent WhoHasNoFriends();
    }
}